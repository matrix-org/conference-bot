# Where the homeserver's Client-Server API is located. Typically this
# is where clients would be connecting to in order to send messages.
homeserverUrl: "https://matrix-client.matrix.org"

# An access token for the bot to use. This should be the as_token from the
# appservice registration.
accessToken: "YOUR_TOKEN_HERE"

# Set this to the desired name for the bot. The account must already be
# registered and accessible as an impersonatable user ID by the accessToken.
userId: "@bot:example.org"

# Location on disk for where to store various bot information.
dataPath: "storage"

# The ID of the room to use as a management room. The bot will only
# accept commands in here.
managementRoom: "!room:example.org"

# The identity server to use to send email invites to any participants. The
# bot will accept all terms of service automatically - please ensure that it
# has legal capability to do so before running the bot in this way.
idServerDomain: "vector.im"

# The brand to supply to the identity server when performing actions which may
# result in emails or other communications to the user.
idServerBrand: "vector-im"

# These are the user IDs of the moderators for all public-facing rooms the bot creates.
# Note that these users will be granted power level 100 (the highest) in every room
# and be invited.
moderatorUserIds: ["@moderator:example.org"]

# Settings for how the bot should represent livestreams.
livestream:
  # The template for livestreams in auditorium rooms
  # Available variables:
  #  id  - The room ID/name (eg: "D.collab")
  #  sId - The room ID/name, but lowercase and only alphanumeric characters
  #        are included (eg: "dcollab")
  auditoriumUrl: "https://stream.example.org/conference/hls/{id}.m3u8"

  # The template for livestreams in talk rooms
  # Available variables:
  #  id    - The talk's ID
  #  audId - The auditorium ID the talk is held in (eg: "D.collab")
  #  jitsi - The Jitsi conference name in lowercase.
  talkUrl: "https://stream.example.org/conference-talks/hls/talk-{id}.m3u8"

  # The template for livestreams in random rooms.
  # Available variables:
  #  jitsi - The Jitsi conference name in lowercase.
  hybridUrl: "https://stream.example.org/conference-hybrids/hls/{jitsi}.m3u8"

  # The URL template for the schedule widget.
  # Available variables:
  #  audId - The auditorium ID the talk is held in (eg: "D.collab")
  scheduleUrl: "https://example.org/?theme=$theme&room={audId}"

  # The domain of the Jitsi server to use. It will be assumed to be using
  # https://github.com/matrix-org/prosody-mod-auth-matrix-user-verification
  jitsiDomain: "jitsi.riot.im"

  # An MSC URI to use as the avatar for widgets generated by the bot.
  widgetAvatar: "mxc://example.org/mediaid"

  # Options for the /onpublish endpoint used to redirect streams from Jitsi
  # to an RTMP location. Query string arguments are:
  #  auth=secret   - See below
  #  conf=aabbcc   - The Jitsi conference name. This should be a base32 string
  #                  when using prosody-mod-auth-matrix-user-verification as above.
  # If no mapping is found, 200 OK is returned for compatibility with nginx.
  onpublish:
    # The hostname to use in the rtmpPrefix template. Some variables are supported
    # here:
    #  squishedAudId  - The auditorium ID with all non-alphanumeric characters
    #                   removed, and lowercase.
    # Note: The hostname will be resolved to an IP address before used as a hostname
    # for compatibility with nginx.
    rtmpHostnameTemplate: "{squishedAudId}.example.org"

    # The URL to redirect to, including scheme.
    # Some variables are supported here:
    #  hostname    - The hostname as generated/resolved by rtmpHostnameTemplate
    #  saltedHash  - The salted hash generated by the bot to secure the stream with.
    rtmpUrlTemplate: "rtmp://{hostname}/stream/{saltedHash}"

    # The salt to use in the hash. The hash will be "event_id.secret" where
    # "event_id" is the penta event ID.
    #
    # The value which must also be supplied as ?auth to /onpublish in order to get
    # a proper 302 redirect. When the auth mismatches a 200 status code will be
    # returned to imply there is no mapping.
    salt: "change me"

# Configuration for the webserver (used to serve widgets for the conference's
# rooms).
webserver:
  # The address to bind to. If using Docker, this should be all interfaces and
  # instead managed through port mapping.
  address: '0.0.0.0'

  # The port to bind the webserver on.
  port: 8080

  # The public URL where the bot can expect to be able to serve widgets from.
  # Note that this URL will be put into the Matrix room state.
  publicBaseUrl: "https://conferences.example.org"

  # Additional assets may be served from `${publicBaseUrl}/assets/*` which are
  # available at this path.
  additionalAssetsPath: "/data/public"

# Information about the conference
conference:
  # The ID of the conference to call this one. Data from other conferences
  # will be ignored (such as past conferences). This will also be used to create
  # the Matrix Space.
  id: "fosdem2021"

  # The name of the conference.
  name: "FOSDEM 2021"


  # You must specifiy a backend for your schedule.
  # It may either be "json", "penta", or "pretalx". Remember to only
  # specify *one*.

  # sample schedule configuration for using the json backend.
  schedule:
    # the backend to pull the schedule from - this can either be a JSON schedule file, or a URL to pull XML from
    # Possible values are "json" or "penta". If JSON is chosen, the path to the file must be provided via the
    # `scheduleDefinition`, and you must ensure that the `database` option below is set to `null`.
    backend: "json"
    # Local path or https URL to a JSON conference schedule. See src/backends/jsonschemas/JsonSchedule.schema.json for
    # the JSON schema of the JSON schedule format.
    scheduleDefinition: "path/to/local/file"

  # sample schedule configuration for using the penta backend.
  # schedule:
    # backend: "penta"
    # The URL to the XML which is updated with conference information.
    # This is read and parsed by the bot during the early stages of
    # setting up the conference.
    # scheduleDefinition: "https://fosdem.org/2021/schedule/xml"

  # sample schedule configuration for using the pretalx backend. 
  # schedule:
    # backend: "pretalx"
    # The format the scheduleDefinition is in. Use "pretalx" if you are loading the
    # JSON export from pretalx directly, or "fosdem" for the specific pentabarf-xml-format
    # they use instead.
    # scheduleFormat: "fosdem"|"pretalx"
    # The URL to the XML which is updated with conference information.
    # This is read and parsed by the bot during the early stages of
    # setting up the conference.
    # scheduleDefinition: "https://fosdem.org/2021/schedule/xml"
    # The endpoint to reach the base API path of the conference.
    # pretalxApiEndpoint: "https://pretalx.example.com/api/events/example-2021/"
    # Access token for accessing the Pretalx API
    # pretalxAccessToken: "secret!"


  # The timezone that the the bot's database is operating off of.
  timezone: "Europe/Brussels"

  # The various support rooms the bot supports. They will be created if they
  # haven't already. If commented out, they won't be created.
  supportRooms:
    #speakers: "#speakers:example.org"
    #specialInterest: "#stands:example.org"
    #coordinators: "#coordinators:example.org"

  # How far in the future the bot should be looking before considering something "finalized".
  # Should never be less than 5 minutes.
  lookaheadMinutes: 5

  # Various prefixes used by the bot when parsing information.
  prefixes:
    # The prefixes for the rooms listed in the pentabarf definition which
    # describe the rooms that are 'auditorium' rooms. The prefixes will be
    # trimmed when naming the room (unless an override is present).
    auditoriumRooms: ["D."]

    # Prefixes for the auditorium rooms that have Q&A sessions.
    # Rooms outside of these prefixes will not have Q&A sessions.
    qaAuditoriumRooms: ["D."]

    # Prefixes for the auditorium rooms that are virtual representations of events taking place in a physical venue.
    # These auditoriums will not have individual rooms for talks.
    physicalAuditoriumRooms: ["P."]

    # The prefixes for the rooms listed in the pentabarf definition which
    # describe the rooms that are 'special interest' rooms. The prefixes will
    # be trimmed when naming the room (unless an override is present).
    interestRooms: ["S.", "B."]

    # Simple mapping of room IDs to chosen names. The names should not contain
    # spaces or any complex characters. This is typically used to resolve naming
    # conflicts after trimming the prefix.
    nameOverrides:
      #"D.example": "example-room"

    # The prefix(es) to apply to all generated room aliases.
    # If there are multiple of them, each one is applied separately (so the room has more and more aliases).
    # (Don't forget an empty string in the list if you want an unprefixed alias for your rooms!)
    aliases:
      - ""

    # The alias suffixes to apply for certain prefixes of rooms
    suffixes:
      #"S.": "-stand"

    # The display name suffixes to apply for certain prefixes of rooms
    displayNameSuffixes:
      #"S.": " stand"

  # A mapping of pre-existing rooms to re-use as interest rooms.
  existingInterestRooms:
    #"I.infodesk": "#infodesk:example.org"

  # The subspaces to create under the main conference space
  subspaces:
    #stands:
    #  displayName: Stands
    #  alias: stands
    #  # The prefixes of rooms which belong in the subspace
    #  prefixes: ["S."]
    #  # The types of tracks which belong in the subspace
    #  trackTypes: ["stands"]

# Options related to the IRC bridge. Set to null if you don't use an IRC bridge.
ircBridge: null
#ircBridge:
  # The nick to use when taking ownership of channels
  #botNick: 'confbot'
  #botPassword: 'a_secret_password'

  # The server name of the IRCd
  #serverName: 'localhost'

  # The port of the IRCd
  #port: 6667

  # The userId of the irc bridge
  #botUserId: '@appservice-irc:example.com'

  # The allowed channel prefix of the bot
  #channelPrefix: '#conference-'

templatesPath: ./srv
runMode: normal

metrics:
  enabled: false
  port: 8081
  address: 127.0.0.1

# if set to `true` will prevent the conf-bot from sending live invites to email/matrix_ids
dry_run_enabled: false
