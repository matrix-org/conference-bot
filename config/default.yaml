# Where the homeserver's Client-Server API is located. Typically this
# is where clients would be connecting to in order to send messages.
homeserverUrl: "https://matrix-client.matrix.org"

# An access token for the bot to use. This should be the as_token from the
# appservice registration.
accessToken: "YOUR_TOKEN_HERE"

# Set this to the desired name for the bot. The account must already be
# registered and accessible as an impersonatable user ID by the accessToken.
userId: "@bot:example.org"

# Location on disk for where to store various bot information.
dataPath: "storage"

# The ID of the room to use as a management room. The bot will only
# accept commands in here.
managementRoom: "!room:example.org"

# The identity server to use to send email invites to any participants. The
# bot will accept all terms of service automatically - please ensure that it
# has legal capability to do so before running the bot in this way.
idServerDomain: "vector.im"

# The brand to supply to the identity server when performing actions which may
# result in emails or other communications to the user.
idServerBrand: "vector-im"

# This is the user ID of the moderator for all public-facing rooms the bot creates.
# Note that this user will be granted power level 100 (the highest) in every room
# and be invited.
moderatorUserId: "@moderator:example.org"

# Settings for how the bot should represent livestreams.
livestream:
  # The template for livestreams in auditorium rooms
  # Available variables:
  #  id  - The room ID/name (eg: "D.collab")
  #  sId - The room ID/name, but lowercase and only alphanumeric characters
  #        are included (eg: "dcollab")
  auditoriumUrl: "https://stream.example.org/conference/hls/{id}.m3u8"

  # The template for livestreams in talk rooms
  # Available variables:
  #  slug  - The shorthand version of the talk name (eg: "matrix-p2p")
  #  audId - The auditorium ID the talk is held in (eg: "D.collab")
  #  jitsi - The Jitsi conference name in lowercase.
  talkUrl: "https://stream.example.org/conference-talks/hls/{slug}.m3u8"

  # The template for livestreams in random rooms.
  # Available variables:
  #  jitsi - The Jitsi conference name in lowercase.
  hybridUrl: "https://stream.example.org/conference-hybrids/hls/{jitsi}.m3u8"

  # The URL template for the schedule widget.
  # Available variables:
  #  audId - The auditorium ID the talk is held in (eg: "D.collab")
  scheduleUrl: "https://example.org/?theme=$theme&room={audId}"

  # The domain of the Jitsi server to use. It will be assumed to be using
  # https://github.com/matrix-org/prosody-mod-auth-matrix-user-verification
  jitsiDomain: "jitsi.riot.im"

  # An MSC URI to use as the avatar for widgets generated by the bot.
  widgetAvatar: "mxc://example.org/mediaid"

  # Options for the /onpublish endpoint used to redirect streams from Jitsi
  # to an RTMP location. Query string arguments are:
  #  auth=secret   - See below
  #  conf=aabbcc   - The Jitsi conference name. This should be a base32 string
  #                  when using prosody-mod-auth-matrix-user-verification as above.
  # If no mapping is found, 200 OK is returned for compatibility with nginx.
  onpublish:
    # The hostname to use in the rtmpPrefix template. Some variables are supported
    # here:
    #  squishedAudId  - The auditorium ID with all non-alphanumeric characters
    #                   removed, and lowercase.
    # Note: The hostname will be resolved to an IP address before used as a hostname
    # for compatibility with nginx.
    rtmpHostnameTemplate: "{squishedAudId}.example.org"

    # The URL to redirect to, including scheme.
    # Some variables are supported here:
    #  hostname    - The hostname as generated/resolved by rtmpHostnameTemplate
    #  saltedHash  - The salted hash generated by the bot to secure the stream with.
    rtmpUrlTemplate: "rtmp://{hostname}/stream/{saltedHash}"

    # The salt to use in the hash. The hash will be "event_id.secret" where
    # "event_id" is the penta event ID.
    #
    # The value which must also be supplied as ?auth to /onpublish in order to get
    # a proper 302 redirect. When the auth mismatches a 200 status code will be
    # returned to imply there is no mapping.
    salt: "change me"

# Configuration for the webserver (used to serve widgets for the conference's
# rooms).
webserver:
  # The address to bind to. If using Docker, this should be all interfaces and
  # instead managed through port mapping.
  address: '0.0.0.0'

  # The port to bind the webserver on.
  port: 8080

  # The public URL where the bot can expect to be able to serve widgets from.
  # Note that this URL will be put into the Matrix room state.
  publicBaseUrl: "https://conferences.example.org"

  # Additional assets may be served from `${publicBaseUrl}/assets/*` which are
  # available at this path.
  additionalAssetsPath: "/data/public"

# Information about the conference
conference:
  # The ID of the conference to call this one. Data from other conferences
  # will be ignored (such as past conferences). This will also be used to create
  # the Matrix Space.
  id: "fosdem2021"

  # The name of the conference.
  name: "FOSDEM 2021"

  # The URL to the XML which is updated with conference information.
  # This is read and parsed by the bot during the early stages of
  # setting up the conference.
  pentabarfDefinition: "https://fosdem.org/2021/schedule/xml"

  # The timezone that the the bot's database is operating off of.
  timezone: "Europe/Brussels"

  # The various support rooms the bot supports. They will be created if they
  # haven't already.
  supportRooms:
    speakers: "#speakers:example.org"
    specialInterest: "#stands:example.org"
    coordinators: "#coordinators:example.org"

  # How far in the future the bot should be looking before considering something "finalized".
  # Should never be less than 5 minutes.
  lookaheadMinutes: 5

  # Connection information to get data about the conference during the conference.
  # This can be readonly. Currently the bot only supports postgresql.
  database:
    host: "localhost"
    port: 5432
    username: "db_username"
    password: "db_password"
    database: "your_db"
    sslmode: "require"

    # The table/view for the bot to access for information about people involved in the conference.
    # Must at least have the following columns:
    #  event_id         - TEXT(like) - The penta ID for the talk (event) associated with
    #                                  the person, if relevant. Null if a coordinator.
    #  person_id        - TEXT(like) - The penta ID for the person.
    #  event_role       - TEXT(like) - One of [speaker, coordinator, host]. See roles later on.
    #  name             - TEXT(like) - The full name, or otherwise useful name, for the person.
    #  email            - TEXT(like) - The preferred email address for the person.
    #  matrix_id        - TEXT(like) - If known, the Matrix User ID for the person, otherwise null.
    #  conference_room  - TEXT(like) - The relevant room. This should match the event_id or be
    #                                  the room where coordinators are assigned.
    #
    # People may be assigned multiple roles with multiple rows.
    #
    # Roles:
    #  speaker      - A speaker for event_id. This person will get moderator in their talk's
    #                 room, and invited to the auditorium backstage room. They will be required
    #                 to check in before their talk starts.
    #
    #  host         - Someone who is moderating the talk itself in collaboration with the speakers
    #                 for the event_id. One host must check in before the talk starts, otherwise
    #                 the issue will be raised to the management room and coordinators will be
    #                 asked to take over. Hosts will get moderator in their talk's room, and be
    #                 invited to the public auditorium room, backstage room, and talk room.
    #
    #  coordinator  - These are typically people responsible for scheduling the auditorium's
    #                 talks. They'll get moderator in the auditorium room, backstage room, and all
    #                 talk rooms for their auditorium, though will only be invited to the auditorium
    #                 and backstage room (and the talk rooms on-demand if needed to fill in for a
    #                 missing host).
    #
    # The bot will ignore unknown events, rooms, and roles.
    #
    # CAUTION: Although the bot uses parameterized queries, it is unable to use the table name as
    # a parameter. As such, this particular config value is vulnerable to SQL injection. Seeing as
    # how you (the bot's admin) are the one entering it: don't do that to yourself.
    tblPeople: "view_matrix_bot_export_people"

    # The table/view for the bot to access for information about the conference schedule.
    # Must at least have the following columns:
    #  event_id            - TEXT(like) - The penta ID for the talk (event).
    #  conference_room     - TEXT(like) - The relevant room. This should match the event_id.
    #  start_datetime      - TIMESTAMP WITHOUT TIME ZONE - The start time of the talk. The timezone
    #                        is determined by the bot using the timezone elsewhere in this config.
    #  duration            - INTERVAL   - How long the talk is meant to last (start to end).
    #  presentation_length - INTERVAL   - The portion of `duration` where the speaker is presenting.
    #                                     The remainder is assumed to be Q&A.
    #  prerecorded         - BOOLEAN    - True if the presentation is prerecorded. When false, the
    #                                     bot will assume that presentation_length is zero and switch
    #                                     directly into "hallway" mode at start_datetime.
    #
    # The bot will ignore unknown talks. Any if the start_datetime is NULL then the bot will ignore
    # that record. If the INTERVAL fields are NULL, the bot will assume zero.
    #
    # Note: the bot is capable of running both tblSchedule and tblPeople off the same table/view.
    # It will use DISTINCT where it needs to in order to get accurate information.
    #
    # CAUTION: Although the bot uses parameterized queries, it is unable to use the table name as
    # a parameter. As such, this particular config value is vulnerable to SQL injection. Seeing as
    # how you (the bot's admin) are the one entering it: don't do that to yourself.
    tblSchedule: "view_matrix_bot_export_schedule"

    # The time in seconds added to the presentation_length to account for preroll material such
    # as sponsor segments. If this is built into the table already then set this to zero.
    scheduleBufferSeconds: 30

  # Various prefixes used by the bot when parsing information.
  prefixes:
    # The prefixes for the rooms listed in the pentabarf definition which
    # describe the rooms that are 'auditorium' rooms. The prefixes will be
    # trimmed when naming the room (unless an override is present).
    auditoriumRooms: ["D."]

    # The prefixes for the rooms listed in the pentabarf definition which
    # describe the rooms that are 'special interest' rooms. The prefixes will
    # be trimmed when naming the room (unless an override is present).
    interestRooms: ["S.", "B."]

    # Simple mapping of room IDs to chosen names. The names should not contain
    # spaces or any complex characters. This is typically used to resolve naming
    # conflicts after trimming the prefix.
    nameOverrides:
      #"D.example": "example-room"

    # The prefix to apply to all generated room aliases.
    aliases: ""

    # The alias suffixes to apply for certain prefixes of rooms
    suffixes:
      #"S.": "-stand"

    # The display name suffixes to apply for certain prefixes of rooms
    displayNameSuffixes:
      #"S.": " stand"

  # A mapping of pre-existing rooms to re-use as interest rooms.
  existingInterestRooms:
    #"I.infodesk": "#infodesk:example.org"

  # The subspaces to create under the main conference space
  subspaces:
    #stands:
    #  displayName: Stands
    #  alias: stands
    #  # The prefixes of rooms which belong in the subspace
    #  prefixes: ["S."]

# Options related to the IRC bridge.
ircBridge:
  # The nick to use when taking ownership of channels
  botNick: 'confbot'
  botPassword: 'a_secret_password'

  # The server name of the IRCd
  serverName: 'localhost'

  # The port of the IRCd
  port: 6667

  # The userId of the irc bridge
  botUserId: '@appservice-irc:example.com'

  # The allowed channel prefix of the bot
  channelPrefix: '#conference-'
